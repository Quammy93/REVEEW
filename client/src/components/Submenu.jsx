import React from "react";
import { useGlobalContext } from "../utils/context";
import { Link, useNavigate } from "react-router-dom";
import axios from "axios";
//const url = "/api";
const url = "http://localhost:5000/api";
import { connect } from "react-redux";
import { SET_PRODUCTS, SET_IS_PRODUCTLOADING } from "../redux/action";

const Submenu = ({
  isShowSubmenu,
  page: { page, links },
  location,
  setProducts,
  setIsProductLoading,
}) => {
  const container = React.useRef();

  const {
    // setProducts,
    //setIsShowSubmenu,
    // setIsProductLoading,
    //  location,
    // isShowSubmenu,
    //  page: { page, links },
    //  closeSubmenu,
  } = useGlobalContext();

  const navigate = useNavigate();

  /**
  const loadProduct = async (category) => {
    //  closeSubmenu();
    await fetchData(category);
  };

 
  const getAllProducts = async (category) => {
    console.log(category);
    return await axios
      .get(`${url}/products?page=${1}&limit=${6}&category=${category}`)
      .catch((error) => {
        console.log(error);
      });
  };

  const fetchData = async (category) => {
    setIsProductLoading(true);
    try {
      const response = await getAllProducts(category);

      const { products, totalCount, numOfPages } = response.data;
      setProducts(products);

      setIsProductLoading(false);
    } catch (error) {
      console.error("Error fetching data:", error);
    }
  };

 */
  // setting up usestate ref
  const [columns, setColumns] = React.useState("col-2");

  React.useEffect(() => {
    setColumns("col-2");
    //setting up the location of the submenu
    const submenuNode = container.current;
    const { center, bottom } = location;
    submenuNode.style.left = `${center}px`;
    submenuNode.style.top = `${bottom}px`;
    //setting up the column of the submenu

    if (links.length === 3) {
      setColumns("col-3");
    }
    if (links.length > 3) {
      setColumns("col-4");
    }
  }, [location, links]);

  return page == "Features" ? (
    <aside
      className={`${isShowSubmenu ? "submenu show" : "submenu"}`}
      ref={container}
    >
      <div className="sub-page-title">
        {" "}
        <b>{page}</b>
      </div>

      <section className="feature-submenu">
        <article className="feature-article">
          <p>
            Thousands of AI-powered images Go beyond the limits of your
            imagination with high quality images generated by Artificial
            Intelligence.
          </p>
          <button className="feature-btn">Get Started</button>
        </article>

        <div className={`feature-center`}>
          {links.map((link, index) => {
            const { url, icon, label } = link;
            console.log(icon);

            return (
              <a key={index} href={url} className="feature-links">
                <div className="feature-item">
                  <img
                    src={Object.values(icon)}
                    alt=""
                    className="feature-image"
                  />
                  <span className="feature-title"> {label}</span>
                </div>
              </a>
            );
          })}
        </div>
      </section>
    </aside>
  ) : (
    <aside
      className={`${isShowSubmenu ? "submenu show" : "submenu"}`}
      ref={container}
    >
      <div className="sub-page-title">
        {" "}
        <b className="category-1">{page}</b>
      </div>

      <div className={`submenu-center ${columns}`}>
        {links.map((link, index) => {
          const { url, icon, label } = link;

          return (
            <a
              key={index}
              href={url}
              className="submenu-links"
              onClick={() => console.log("....presing")} //loadProduct(label)}
            >
              <img src={icon} alt="" className="icon-image" />
              <div className="icon-label"> {label}</div>
            </a>
          )
        })}
      </div>
    </aside>
  );
};

const mapStateToProps = (state) => {
  return {
    isShowSubmenu: state.appFunctions.isShowSubmenu,
    page: state.appFunctions.page,
    location: state.appFunctions.location,
  };
};

const mapDispatchToProps = (dispatch) => {
  return {
    setProducts: (products) =>
      dispatch({ type: SET_PRODUCTS, payload: { products: products } }),

    setIsProductLoading: (status) =>
      dispatch({ type: SET_IS_PRODUCTLOADING, payload: { status: status } }),
  };
};

export default connect(mapStateToProps, mapDispatchToProps)(Submenu);
